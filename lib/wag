#!/usr/bin/env ruby

# Copyright (c) 2012-2012, John Mettraux, jmettraux@gmail.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'pp'


class Wag

  VERSION = '1.0.0'

  VHOME = ENV['WAG_HOME'] || '~/vagrant'
  VMAN = ENV['WAG_VMAN'] || `which VBoxManage`.strip
  VAG = ENV['WAG_VAG'] || `which vagrant`.strip

  SELF = File.basename($0)

  DOC = {}

  class Vm < Struct.new(:nick, :name, :uuid)
  end

  def vms

    `#{VMAN} list vms`.split("\n").collect { |line|
      m = line.match(/^"([^"]+)" \{([^\}]+)\}$/)
      m ? Vm.new(m[1].split('_').first, m[1], m[2]) : nil
    }.compact
  end

  # Returns a Vm instance if there is one with the given name or nick.
  #
  def lookup_vm(s)

    vms.find { |vm| vm.name == s || vm.nick == s }
  end

  # Blue...
  #
  def echo(s)

    if STDOUT.tty?
      puts("[34m#{s}[0m")
    else
      puts(s)
    end
  end

  def exec(com)

    echo(com)
    Kernel.exec(com)
  end

  def vagrant_method(vm, *commands)

    exec(commands.inject([ "cd #{VHOME}/#{vm}" ]) { |a, c|
      a << "#{VAG} #{c}"
    }.join(' && '))
  end

  def vagrant_function(*args)

    exec("#{VAG} #{args.join(' ')}")
  end

  def vman_function(*args)

    args = args.first if args.first.is_a?(Array)

    exec("#{VMAN} #{args.join(' ')}")
  end

  PREFIXES = %w[ vm_ vf_ mm_ mf_ wf_ ]

  def lookup_rmeths(args)

    args[0, 2].collect do |a|
      PREFIXES.collect { |pref|
        meth = pref + a.gsub(/-/, '_')
        self.respond_to?(meth) ? meth : nil
      }.compact
    end
  end

  def get_method(a); (a || []).find { |e| e.match(/^.m_/) }; end
  def get_function(a); (a || []).find { |e| e.match(/^.f_/) }; end

  # The "run" method
  #
  def run

    return print_usage if ARGV.size < 1

    vm = lookup_vm(ARGV[0])

    ARGV << 'up_and_ssh' if vm && ARGV[1].nil?

    rmeths = lookup_rmeths(ARGV)

    if vm && m = get_method(rmeths[1])

      rmeth = method(m)

      if rmeth.arity == 2
        send(m, vm, ARGV[1..-1])
      else
        send(m, vm)
      end

    elsif f = rmeths.find { |rms| get_function(rms) }

      rmeth = method(f.first)

      if rmeth.arity == 1
        send(f.first, ARGV[1..-1])
      else
        send(f.first)
      end

    else

      com = vm ? ARGV[1] : ARGV[0]

      raise ArgumentError.new(
        "unknown command #{com.inspect} " +
        "- try running \"#{SELF} help\"")
    end
  end

  #
  # the commands and their helpers

  def print_usage

    s = []
    s << ""
    s << "#{SELF} USAGE:"
    s << ""
    DOC.sort_by { |k, v| k }.each do |k, (rmeth, sig, lines)|
      s << "  #{sig}"
      lines.each do |l|
        s << "    #{l}"
      end
      s << ""
    end
    s << ""
    echo s.join("\n")
  end

  # prints the help (aliased to "wag -h" and "wag --help")
  #
  def wf_help

    print_usage
  end

  alias wf__h wf_help
  alias wf___help wf_help

  # prints the version of this wag tool
  #
  def wf__v

    echo VERSION
  end

  alias wf___version wf__v

  def wf__env

    ENV.select { |k, v|
      k.match(/^WAG_/)
    }.sort.each { |k, v|
      echo "#{k}: #{v.inspect}"
    }
  end

  # :nodoc: hidden function
  #
  def wf__consts

    self.class.constants.sort.each do |con|
      echo "#{con}: #{self.class.const_get(con).inspect}"
    end
  end

  # hard VBoxManage poweroff for a vm
  #
  def mm_poweroff(vm)

    vman_function('controlvm', vm.name, 'poweroff')
  end

#  def flatten(type, args)
#
#    args.collect { |e|
#      if e.is_a?(Array)
#        type == :nick ? e.first : e.last
#      else
#        e
#      end
#    }
#  end
#
#  def man(args)
#
#    vman_function(flatten(:vm, args))
#  end

  # lists vms managed by Oracle's VirtualBox / Vagrant
  #
  def wf_vms

    format = "%-19s %-19s %-19s\n"

    printf(format, *%w[ NICK NAME UUID ])

    vms.each do |vm|
      printf(format, *[ vm.nick, vm.name, vm.uuid ])
    end
  end

  # a shortcut to "wag box list"
  #
  def vf_boxes

    vagrant_function('box', 'list')
  end

  # calls up "vagrant box ARGS*"
  #
  def vf_box(args)

    vagrant_function(*[ 'box', *args ])
  end

  # makes sure a vm is up and then SSHs into it
  # shortcut: wag NICK
  #
  def vm_up_and_ssh(vm, args)

    # TODO: pass trailing args (-c for example...)

    vagrant_method(vm.nick, 'up', 'ssh')
  end

  # makes sure a vm is up
  #
  def vm_up(vm); vagrant_method(vm.nick, 'up'); end

  # suspends a vm
  #
  def vm_suspend(vm); vagrant_method(vm.nick, 'suspend'); end

  # resumes a [suspended] vm
  #
  def vm_resume(vm); vagrant_method(vm.nick, 'resume'); end

  # print the status of a vm
  #
  def vm_status(vm); vagrant_method(vm.nick, 'status'); end

  # halts a vm
  #
  def vm_halt(vm); vagrant_method(vm.nick, 'halt'); end

  # outputs the "~/.ssh/config"-ok lines for a vm
  #
  def vm_ssh_config(vm); vagrant_method(vm.nick, 'ssh_config'); end

  # sshs into a vm
  #
  def vm_ssh(vm, args)

    # TODO: pass trailing args (-c for example...)

    vagrant_method(vm.nick, 'ssh')
  end

  #--
  # documentation parser
  #++

  def self.parse_doc

    lines = File.readlines(__FILE__)

    rmeths = instance_methods.select { |m|
      PREFIXES.find { |pref| m.to_s.match(/^#{pref}/) }
    }

    rmeths.each do |rmeth|

      ls = lines.take_while { |l|
        ! (l.match(/^  def #{rmeth}\b/) || l.match(/^  alias #{rmeth} /))
      }

      ls = [] if ls == lines

      ls = ls.reverse.take_while { |l| l.match(/^  #/) }.reverse

      ls = ls.collect { |l| l[4..-1].strip }
      ls.pop if ls.last == ''

      ls = [] if ls.find { |l| l.match(/:nodoc:/) }

      next if ls.empty?

      pref = rmeth[0, 3]
      name = rmeth[3..-1].gsub(/_/, '-')
      meth = !!rmeth.match(/^.m_/)

      arity = instance_method(rmeth).arity
      arity = arity - 1 if meth

      sig = [
        SELF,
        meth ? "NICK" : nil,
        name,
        arity == 1 ? "ARGS*" : nil
      ].compact.join(' ')

      DOC[sig] = [ rmeth, sig, ls ]
    end

    DOC['wag NICK'] = [
      'wf_up_and_ssh', 'wag NICK', [ 'shortcut for "wag NICK up-and-ssh"' ]
    ]
  end

  parse_doc
end

Wag.new.run #if $0 == __FILE__
  # no need for the $0 trick as this file is never supposed to be required

